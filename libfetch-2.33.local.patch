--- libfetch-2.33/common.h.orig	2010-08-23 22:40:48.000000000 +0200
+++ libfetch-2.33/common.h	2016-03-09 10:01:24.270907600 +0100
@@ -47,7 +47,7 @@
 
 #if !defined(__sun) && !defined(__hpux) && !defined(__INTERIX) && \
     !defined(__digital__) && !defined(__linux) && !defined(__MINT__) && \
-    !defined(__sgi)
+    !defined(__sgi) && !defined(__midipix__)
 #define HAVE_SA_LEN
 #endif
 
--- libfetch-2.33/Makefile.orig	2010-08-23 20:40:48.000000000 +0000
+++ libfetch-2.33/Makefile	2016-07-08 22:18:05.749860554 +0000
@@ -1,42 +1,93 @@
-# $NetBSD: Makefile,v 1.5 2010/02/24 22:00:51 joerg Exp $
-
-LIB=		fetch
-SRCS=		fetch.c common.c ftp.c http.c file.c
-DPSRCS= 	ftperr.h httperr.h
-INCS=		fetch.h
-MAN=		fetch.3
-CLEANFILES=	ftperr.h httperr.h
-MKLINT=		no
-MKPIC=		no
-MKPROFILE=	no
-
-.include <bsd.own.mk>
-
-CPPFLAGS+=	-I.
-CPPFLAGS+=	-D_LARGEFILE_SOURCE -D_LARGE_FILES
-
-FETCH_WITH_INET6?=	no
-FETCH_WITH_OPENSSL?=	no
-
-.if !empty(FETCH_WITH_INET6:M[yY][eE][sS])
-CPPFLAGS+=	-DINET6
-.endif
-
-.if !empty(FETCH_WITH_OPENSSL:M[yY][eE][sS])
-CPPFLAGS+=	-DWITH_SSL
-LDADD=		-lssl -lcrypto
-.endif
-
-CPPFLAGS+=	-DFTP_COMBINE_CWDS
-
-WARNS?=		4
-
-ftperr.h: ${.CURDIR}/ftp.errors ${.CURDIR}/Makefile ${.CURDIR}/errlist.sh
-	${.CURDIR}/errlist.sh ftp_errlist FTP \
-	    ${.CURDIR}/ftp.errors > ${.TARGET}
-
-httperr.h: ${.CURDIR}/http.errors ${.CURDIR}/Makefile ${.CURDIR}/errlist.sh
-	${.CURDIR}/errlist.sh http_errlist HTTP \
-	    ${.CURDIR}/http.errors > ${.TARGET}
-
-.include <bsd.lib.mk>
+prefix = /usr
+DESTDIR =
+DEBUG = false
+FETCH_WITH_INET6 = true
+FETCH_WITH_OPENSSL = true
+FETCH_WITH_LFS = true
+
+WARNINGS = -Wall -Wstrict-prototypes -Wsign-compare -Wchar-subscripts \
+	   -Wpointer-arith -Wcast-align -Wsign-compare
+CFLAGS   += -O2 -pipe -I. -fPIC $(WARNINGS)
+
+
+CFLAGS	+= -DFTP_COMBINE_CWDS -DNETBSD
+
+ifeq ($(strip $(FETCH_WITH_LFS)), true)
+CFLAGS+=	-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGE_FILES
+endif
+
+ifeq ($(strip $(FETCH_WITH_INET6)), true)
+CFLAGS+=	-DINET6
+endif
+
+ifeq ($(strip $(FETCH_WITH_OPENSSL)), true)
+CFLAGS+=	-DWITH_SSL
+LDFLAGS_LIBS+=	-lssl -lcrypto
+endif
+
+ifeq ($(strip $(DEBUG)), true)
+CFLAGS += -g -DDEBUG
+else
+CFLAGS += -UDEBUG
+endif
+
+CC = $(CROSS_COMPILE)gcc
+LD = $(CROSS_COMPILE)gcc
+AR = $(CROSS_COMPILE)ar
+RANLIB = ranlib
+INSTALL = install -c -D
+
+OBJS= fetch.o common.o ftp.o http.o file.o
+INCS= fetch.h common.h
+GEN = ftperr.h httperr.h
+MAN = libdownload.3
+
+#pretty print!
+E = @echo
+Q = @
+
+all: libfetch.so libfetch.a
+	$(E) "  built with:  " $(CFLAGS)
+.PHONY: all
+
+%.o: %.c $(INCS) $(GEN)
+	$(E) "  compile   " $@
+	$(Q) $(CC) $(CFLAGS) -c $<
+
+ftperr.h: ftp.errors
+	$(E) "  generate  " $@
+	$(Q) ./errlist.sh ftp_errlist FTP ftp.errors > $@
+
+httperr.h: http.errors
+	$(E) "  generate  " $@
+	$(Q) ./errlist.sh http_errlist HTTP http.errors > $@
+
+libfetch.so: $(GEN) $(INCS) $(OBJS)
+	$(E) "  build     " $@
+	$(Q) rm -f $@
+	$(Q) $(LD) $(LDFLAGS) *.o -shared -o $@ $(LDFLAGS_LIBS)
+
+libfetch.a: $(GEN) $(INCS) $(OBJS)
+	$(E) "  build     " $@
+	$(Q) rm -f $@
+	$(Q) $(AR) rcs $@ *.o
+	$(Q) $(RANLIB) $@
+
+clean:
+	$(E) "  clean     "
+	$(Q) rm -f libfetch.so libfetch.a *.o $(GEN)
+.PHONY: clean
+
+install: all
+	$(Q) $(INSTALL) -m 755 libfetch.so $(DESTDIR)$(prefix)/lib/libfetch.so
+	$(Q) $(INSTALL) -m 644 libfetch.a $(DESTDIR)$(prefix)/lib/libfetch.a
+	$(Q) $(INSTALL) -m 644 fetch.h $(DESTDIR)$(prefix)/include/fetch.h
+	$(Q) $(INSTALL) -m 644 fetch.3 $(DESTDIR)$(prefix)/share/man/man3/fetch.3
+.PHONY: install
+
+uninstall:
+	$(Q) rm -f $(DESTDIR)$(prefix)/lib/libfetch.so
+	$(Q) rm -f $(DESTDIR)$(prefix)/lib/libfetch.a
+	$(Q) rm -f $(DESTDIR)$(prefix)/include/fetch.h
+	$(Q) rm -f $(DESTDIR)$(prefix)/share/man/man3/fetch.3
+.PHONY: uninstall
